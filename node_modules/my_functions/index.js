// Funzione per ottenere la lista dei rivelatori e lo status attuale dei rivelatori
// in oggetto (client) va messo il client di Redis contenente la lista

function check_alive(client, callback) {
        var report = '{"list":[\n';
        var i=0;
        client.on("error", function (err) {
                console.log("Error " + err);
            });
        getRevealersStatus()
        function getRevealersStatus() {
                client.smembers("Revealers", function(err, types){
                        read_type(0)
                        function read_type(i) {
                                client.smembers(types[i], function(err, ip){
                                        if (i==types.length) {
                                                report=report+'{}]}'
                                                obj=JSON.parse(report)
                                                obj.list.pop()
                                                obj.list.sort(function(a, b){
                                                  return a.status > b.status;
                                                });
                                                callback(obj, types);
                                        }
                                        else {
                                                type=types[i]
                                                read_status(0, ip, type)
                                        }
                                })
                        }
                        function read_status(j, ip, type) {
                                if (j==ip.length) {
                                        i++
                                        read_type(i)
                                        }                               
                                else {
                                        riv = type+':'+ip[j]
                                        client.get(riv, function(err, reply){
                                                if (err) {
                                                        report='{"list":[\n'
                                                        getRevealersStatus()
                                                        }        
                                                else 
                                                        {
                                                        report = report+('{"type":"'+type+'","ip":"'+ip[j]+'","status":"'+reply)+'"},\n';
                                                        j++
                                                        read_status(j, ip, type)
                                                        }
                                        })
                                     }
                        }
                });
        }
}

// Funzione per ottenere le proprietà del rivelatore
// in oggetto (client) va messo il client di Redis
// in oggetto (type) va messo il tipo di rivelatore da cui si vogliono ottenere informazioni
// in oggetto (ip) va messo l'ìp del rivelatore da cui si vogliono ottenere informazioni

function check_property(client,type,ip, callback) {
        client.on("error", function (err) {
                console.log("Error " + err);
            });
        key=type+':'+ip+':property';
        client.hgetall(key, function (err, obj) {
                if (err) console.log(err);
                callback(obj);
        })
}

function get_compatible_riv_list (path, callback) {
fs = require('fs')
        fs.readdir(path,function(err,a){
                var b = []
                check_dir(0)
                function check_dir(i){
                        if (i<a.length){
                                if (a[i].indexOf('.') == -1) b.push(a[i])
                                i++
                                check_dir(i)
                        }
                        else next()
                }
                function next() {
                        index=b.indexOf('prova')
                        b.splice(index,1)
                        callback(b)        
                }
        } )
}

exports.get_compatible_riv_list = get_compatible_riv_list;
exports.check_alive = check_alive;
exports.check_property = check_property;
